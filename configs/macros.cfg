######################################################################
# Start Print and End Print
######################################################################

# [gcode_macro var_storage]
# variable_filament_type: "ABS"
# gcode:
#     m118 {filament_type}


# [gcode_macro test]
# gcode:
#     {% set var1 = printer["gcode_macro var_storage"].filament_type %}
#     m118 var1: {var1}
#     SET_GCODE_VARIABLE MACRO=var_storage VARIABLE=filament_type VALUE='"PLA"'
#     # SET_GCODE_VARIABLE MACRO=<macro_name> VARIABLE=<name> VALUE=<value>
#     {% set var2 = printer["gcode_macro var_storage"].filament_type %}
#     m118 var2: {var2}


# default to ABS
[gcode_macro material_vars]
variable_material_type: "none"
variable_print_temp:    -1
variable_bed_temp:      -1
variable_chamber_temp:  -1
variable_preheat_sw:    False
variable_nevermore_sw:  False
variable_bed_fan_sw:    False
gcode:
    m118 material_type: {material_type}
    m118 print_temp:    {print_temp}
    m118 bed_temp:      {bed_temp}
    m118 chamber_temp:  {chamber_temp}
    m118 preheat_sw:    {preheat_sw}
    m118 nevermore_sw:  {nevermore_sw}
    m118 bed_fan_sw:    {bed_fan_sw}

# must pass type in like MATERIAL='"type"'
[gcode_macro set_material_vars]
gcode:
    {% set mtype = params.MATERIAL %}
    # SET_GCODE_VARIABLE MACRO=material_vars VARIABLE=material_type VALUE='{mtype}'
    {% if mtype == '"ABS"' %}
        SET_GCODE_VARIABLE MACRO=material_vars VARIABLE=material_type VALUE='"ABS"'
        SET_GCODE_VARIABLE MACRO=material_vars VARIABLE=print_temp VALUE=260
        SET_GCODE_VARIABLE MACRO=material_vars VARIABLE=bed_temp VALUE=100
        SET_GCODE_VARIABLE MACRO=material_vars VARIABLE=chamber_temp VALUE=45       
        SET_GCODE_VARIABLE MACRO=material_vars VARIABLE=preheat_sw VALUE=True
        SET_GCODE_VARIABLE MACRO=material_vars VARIABLE=nevermore_sw VALUE=True
        SET_GCODE_VARIABLE MACRO=material_vars VARIABLE=bed_fan_sw VALUE=True
 
    {% elif mtype == '"PLA"' %}
        SET_GCODE_VARIABLE MACRO=material_vars VARIABLE=material_type VALUE='"PLA"'
        SET_GCODE_VARIABLE MACRO=material_vars VARIABLE=print_temp VALUE=220
        SET_GCODE_VARIABLE MACRO=material_vars VARIABLE=bed_temp VALUE=60
        SET_GCODE_VARIABLE MACRO=material_vars VARIABLE=chamber_temp VALUE=0       
        SET_GCODE_VARIABLE MACRO=material_vars VARIABLE=preheat_sw VALUE=False
        SET_GCODE_VARIABLE MACRO=material_vars VARIABLE=nevermore_sw VALUE=False
        SET_GCODE_VARIABLE MACRO=material_vars VARIABLE=bed_fan_sw VALUE=False
                
    {% elif mtype == '"PETg"' %}
        SET_GCODE_VARIABLE MACRO=material_vars VARIABLE=material_type VALUE='"PETg"'
        SET_GCODE_VARIABLE MACRO=material_vars VARIABLE=print_temp VALUE=250
        SET_GCODE_VARIABLE MACRO=material_vars VARIABLE=bed_temp VALUE=70
        SET_GCODE_VARIABLE MACRO=material_vars VARIABLE=chamber_temp VALUE=0       
        SET_GCODE_VARIABLE MACRO=material_vars VARIABLE=preheat_sw VALUE=False
        SET_GCODE_VARIABLE MACRO=material_vars VARIABLE=nevermore_sw VALUE=False
        SET_GCODE_VARIABLE MACRO=material_vars VARIABLE=bed_fan_sw VALUE=False

    {% else %}
        { action_raise_error("Unknown filament type!!") }

    {% endif %}
        


[gcode_macro LIGHTS_ON]
gcode:
    SET_LED LED=ring_light WHITE=1.0
    SET_LED LED=enclosure_LED WHITE=1.0


[gcode_macro LIGHTS_OFF]
gcode:
    SET_LED LED=ring_light WHITE=0.0
    SET_LED LED=enclosure_LED WHITE=0.0


[gcode_macro M106]
# rename_existing: M106
description: coolling fan speed control
gcode:
    {% if params.S is defined %}
        {% if params.S|int == 255 %}
            {% set rs = 1 %}
        {% else %}
            {% if params.S|int == 0%}
                {% set rs = 0 %}
                SET_FAN_SPEED FAN=part_cooling SPEED={rs}
            {% else %}
                {% set rs = 0.003921*params.S|int %}
            {% endif %}
        {% endif %}
        SET_FAN_SPEED FAN=part_cooling SPEED={rs}
    {% else %}
        SET_FAN_SPEED FAN=part_cooling SPEED=1
    {% endif %}


[gcode_macro PREHEAT_CHAMBER]
gcode:
    # retrieve material variables
    {% set BED_TEMP = printer["gcode_macro SET_MATERIAL_VARIABLES"].bed_temp %}
    {% set TARGET_TEMP = printer["gcode_macro SET_MATERIAL_VARIABLES"].chamber_temp %}
    {% set PREHEAT_SW = printer["gcode_macro SET_MATERIAL_VARIABLES"].preheat_sw %}
    {% set BED_FANS_SW = printer["gcode_macro SET_MATERIAL_VARIABLES"].bed_fan_sw %}

    # set internal variables:
    {% set timeout = 1800 %}	# timeout in seconds
    {% set wait_time = 10 %}	# interval in seconds
    # {% set num_loops = timeout / wait_time |round(0, 'floor')|int %}    # loop iterations
    {% set num_loops = 3 %}    # loop iterations

    m118 bed temp: {bed_temp}
    m118 target temp: {TARGET_TEMP}
    m118 PREHEAT_SW: {PREHEAT_SW}
    m118 bed_fans_sw: {BED_FANS_SW}
    m118 timeout: {timeout}
    m118 wait_time: {wait_time}
    m118 num_loops: {num_loops}


    {% if PREHEAT_SW %}    

        m118 got into preheat       
        
        # save gcode state
        SAVE_GCODE_STATE NAME=preheat_chamber

        # lights on
        LIGHTS_ON
                
        # set fans on, except nevermore (to avoid using up the carbon)
        # SET_FAN_SPEED FAN=nevermore SPEED=1.0
        SET_FAN_SPEED FAN=BedFans SPEED=1.0
        SET_FAN_SPEED FAN=part_cooling SPEED=1.0        
        
        # set bed temp.
        M109 S{BED_TEMP}

        # wait for chamber temp, exiting on reaching it, or timeout
        {% for i in range(0, num_loops) %}

            m118 start of preheat loop
        
            # calculate min of chamber temps
            {% set gantry_temp = printer["temperature_sensor chamber_gantry"].temperature|round|int %}
            {% set head_temp = printer["temperature_sensor chamber_hotend"].temperature|round|int %}
            {% if gantry_temp < head_temp %}
                {% set chamber_temp = gantry_temp %}
            {% else %}
                {% set chamber_temp = head_temp %}
            {% endif %}
            
            # if chamber temp met: success notification
            {% if chamber_temp >= TARGET_TEMP %}
                m118 up to temp!
                nokia_ringtone
                #TODO: flash the chamber lights?
                # {% break %} # break doesn't work?
                {% set i = num_loops %}
            
            # elif last iteration: error
            {% elif loop.last %}
                m118 timed out
                end_tones
            
            # else, wait
            {% else %}
                m118 still waiting
                G4 S{wait_time}
            
            {% endif %}	
        {% endfor %}

        # restore gcode state
        RESTORE_GCODE_STATE NAME=preheat_chamber
    {% endif %}
    m118 finished preheat


[gcode_macro START_PRINT]
gcode:

    # material-specific variables. 
    # the macro needs to be called first, in order for it to reset the values according to the material
    # material_vars
    # set_material_vars MATERIAL='"ABS"'
    # material_vars

    # # parse the values into more easily used variables
    # {% set mt = printer["gcode_macro material_vars"].material_type %}
    # {% set EXTRUDER_TEMP = printer["gcode_macro material_vars"].print_temp %}
    # {% set BED_TEMP = printer["gcode_macro material_vars"].bed_temp %}
    # {% set CHAMBER_TEMP = printer["gcode_macro material_vars"].chamber_temp %}
    # {% set PREHEAT_SW = printer["gcode_macro material_vars"].preheat_sw %}
    # {% set NEVERMORE_SW = printer["gcode_macro material_vars"].nevermore_sw %}
    # {% set BED_FANS_SW = printer["gcode_macro material_vars"].bed_fan_sw %}

    # filament type
    {% set filament_type = "ABS" %}

    {% if filament_type == '"ABS"' %}
        {% set EXTRUDER_TEMP = 260}
        {% set BED_TEMP = 100}
        {% set CHAMBER_TEMP = 45}
        {% set PREHEAT_SW = True}
        {% set NEVERMORE_SW = True}
        {% set BED_FANS_SW = True}
 
    {% elif filament_type == '"PLA"' %}
        {% set EXTRUDER_TEMP = 220}
        {% set BED_TEMP = 60}
        {% set CHAMBER_TEMP = 0}
        {% set PREHEAT_SW = False}
        {% set NEVERMORE_SW = False}
        {% set BED_FANS_SW = False}
                
    {% elif filament_type == '"PETg"' %}
        {% set EXTRUDER_TEMP = 240}
        {% set BED_TEMP = 70}
        {% set CHAMBER_TEMP = 0}
        {% set PREHEAT_SW = False}
        {% set NEVERMORE_SW = False}
        {% set BED_FANS_SW = False}

    {% else %}
        { action_raise_error("Unknown filament type!!") }

    {% endif %}

    m118 {filament_type}
    M118 EXTRUDER_TEMP: {EXTRUDER_TEMP}
    M118 BED_TEMP: {BED_TEMP}
    M118 CHAMBER_TEMP: {CHAMBER_TEMP}
    M118 PREHEAT_SW: {PREHEAT_SW}
    M118 NEVERMORE_SW: {NEVERMORE_SW}
    M118 BED_FANS_SW: {BED_FANS_SW}

    # # preheat the chamber, if applicable
    # PREHEAT_CHAMBER 

    # #cooler nozzle while leveling and such
    # {% set EX_OFF = 50|float %}

    # # basic prep
    # LIGHTS_ON
    # SET_FAN_SPEED FAN=nevermore SPEED=0.3
    # G28                         # Home the printer
    # GOTO_PARK_POS_1             # move nozzle over the purge bucket to catch oozing

    # # cool nozzle a bit to avoid oozing while calibrating
    # # note, klipper doesn't recognize the R parameter, but WILL wait for cooling
    # # https://github.com/Klipper3d/klipper/issues/1282
    # M109 S{EXTRUDER_TEMP - EX_OFF}
    
    # # calibration and such:
    # CLEAN_NOZZLE                    # cean nozzle before starting to level
    # SET_GCODE_OFFSET Z=0.0          # Reset the G-Code Z offset (adjust Z offset if needed)
    # QUAD_GANTRY_LEVEL               # level the gantry
    # CALIBRATE_Z                     # calibrate Z-offset

    # # generate a new bed mesh
    # BED_MESH_CLEAR                  # clear the existing one
    # BED_MESH_CALIBRATE              # probe the bed
    # BED_MESH_PROFILE SAVE=RUNTIME   # save the probed points
    # BED_MESH_PROFILE LOAD=RUNTIME   # laod the saved points

    # # increase nozzle temp over bucket, and clean before printing
    # GOTO_PARK_POS_1
    # M140 S{BED_TEMP}                # bed should already be at temp, but reset, just to be sure
    # M109 S{EXTRUDER_TEMP}           # Set and wait for nozzle to reach temperature
    # CLEAN_NOZZLE


[gcode_macro END_PRINT]
gcode:
    # Turn off bed, extruder, and fan
    # M140 S0
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=0
    M104 S0
    M106 S0
    
    # Raise nozzle by 10mm, and move extruder out of the way
    G91             # relative positioning
    G0 Z10 F9000    # raise z
    # G90             # absolute positioning
    # G0 X175 Y310    # move to back center of printer
    GOTO_PARK_POS_2
    
    # Disable steppers
    M84

    # turn off nevermore after 10min
    G4 S600
    SET_FAN_SPEED FAN=nevermore SPEED=0.0


[gcode_macro EXTRUDER_MAINTENANCE]
gcode:
    LIGHTS_ON    
    SMART_HOME
    G90
    
    # move above front-center of bed
    G1 X175 Y25 Z150 F9000


[gcode_macro CENTER_HEAD]
gcode:
    LIGHTS_ON
    # home all axes, pick up the probe, and set absolute position
    G28
    ATTACH_PROBE
    G90
    
    # move just above center of bed
    G1 X175 Y175 Z10 F9000


[gcode_macro RETEST_RESONANCES]
gcode:
    LIGHTS_ON
    G28
    QUAD_GANTRY_LEVEL
    TEST_RESONANCES AXIS=X
    TEST_RESONANCES AXIS=Y
    M84


[gcode_macro GOTO_PARK_POS_1]
gcode:
    SMART_HOME
    G90
    G1 X50 Y350 F9000   


[gcode_macro GOTO_PARK_POS_2]
gcode:
    SMART_HOME
    G90
    G1 X175 Y350 F9000


[gcode_macro GOTO_PARK_POS_3]
gcode:
    SMART_HOME
    G90
    G1 X175 Y0 F9000


# https://www.reddit.com/r/klippers/comments/j2veu8/home_printer_but_only_if_needed_share/
[gcode_macro SMART_HOME]
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %}
        G28
    {% endif %}



#TODO: new ideas
# - preheat_chamber_<material>
#   - run enclosure heater until temp reached
#   - preheat bed
#   - notification tone? M300? requires LCD?
#       - https://marlinfw.org/docs/gcode/M300.html
# - 
# - 
# - 
# - 

[idle_timeout]
gcode:
#   A list of G-Code commands to execute on an idle timeout. See
#   docs/Command_Templates.md for G-Code format. The default is to run
#   "TURN_OFF_HEATERS" and "M84".
    TURN_OFF_HEATERS
    M84
    LIGHTS_OFF

timeout: 1800
#   Idle time (in seconds) to wait before running the above G-Code
#   commands. The default is 600 seconds.