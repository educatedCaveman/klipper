[server]
host: 0.0.0.0
port: 7125
enable_debug_logging: False
klippy_uds_address: /tmp/klippy_uds

[database]
database_path: /home/pi/.moonraker_database

[authorization]
trusted_clients:
    10.0.0.0/8
    127.0.0.0/8
    169.254.0.0/16
    172.16.0.0/12
    192.168.0.0/16
    FE80::/10
    ::1/128
cors_domains:
    http://*.lan
    http://*.local
    http://*://my.mainsail.xyz
    http://*://app.fluidd.xyz
    http://*.drak3.io
    https://*.drak3.io

[file_manager]
config_path: /home/pi/hu3bert
log_path: /home/pi/klipper_logs

[octoprint_compat]

[history]

[update_manager]
channel: dev
refresh_interval: 168

[update_manager mainsail]
type: web
repo: mainsail-crew/mainsail
path: ~/mainsail

[update_manager fluidd]
type: web
repo: fluidd-core/fluidd
path: ~/fluidd

#[update_manager KlipperScreen]
#type: git_repo
#path: /home/pi/KlipperScreen
#origin: https://github.com/jordanruthe/KlipperScreen.git
#env: /home/pi/.KlipperScreen-env/bin/python
#requirements: scripts/KlipperScreen-requirements.txt
#install_script: scripts/KlipperScreen-install.sh

[update_manager client z_calibration]
type: git_repo
path: ~/klipper_z_calibration
origin: https://github.com/protoloft/klipper_z_calibration.git
install_script: install.sh
managed_services: klipper


[secrets]
secrets_path: ~/.moonraker_secrets.ini


# [notifier discord]
# url:    {secrets.discord.webhook}
# events: started, complete, error, cancelled, paused, resumed
# body:   "{event_name}: {event_args[1].filename}

# **file:** {event_args[1].filename}
# **filament:** {event_args[1].filament_used|round|int}mm
# **print time:** {(event_args[1].total_duration/3600)|int}h:{'%02d' % (((event_args[1].total_duration|int % 3600) / 60)|int)}m:{'%02d' % ((event_args[1].total_duration|int % 60)|int)}s
# "
#   The body of the notification. This option accepts Jinja2 templates.
#   You can use {event_name} to print the current event trigger name. And {event_args} for
#   the arguments that came with it.
# title: HU3BERT
#   The optional title of the notification. Just as the body, this option accepts Jinja2 templates.
# attach:
#   An optional attachment. Can be an url of a webcam for example. Note: this isn't available for all
#   notification services. You can check if it's supported on the Apprise Wiki. Be aware that links in
#   your internal network can only be viewed within your network.

[notifier print_start]
url:    {secrets.discord.webhook}
events: started
body: Your printer started printing '{event_args[1].filename}'

[notifier print_complete]
url:    {secrets.discord.webhook}
events: complete
body: Your printer completed printing '{event_args[1].filename}'

[notifier print_error]
url:    {secrets.discord.webhook}
events: error
body: {event_args[1].message}